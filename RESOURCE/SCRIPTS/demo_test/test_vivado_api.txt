
# test_vivado_api.txt - 实际Vivado全功能硬件测试脚本
# 注意：此脚本会实际操作FPGA硬件，请确保硬件连接正常
# 放置路径: C:\Users\win\Desktop\HybrdchipGUI\merge_zhiwei\AutoTestTool\RESOURCE\SCRIPTS\demo_test\test_vivado_api.tx

echo "🔥 开始实际Vivado全功能硬件测试"
echo ""
echo "⚠️  警告：此脚本将实际操作FPGA硬件！"
echo "   请确保：1) FPGA开发板已连接  2) 驱动已安装  3) bit文件有效"
echo ""

# =============================================================================
# 环境设置和变量定义
# =============================================================================

echo "📝 设置实际测试环境..."
set VIVADO_PATH "C:\\Xilinx\\Vivado\\2020.1\\bin"
set BASE_PATH "C:\\Users\\win\\Desktop\\HybrdchipGUI\\merge_zhiwei\\AutoTestTool"
set LOG_DIR "$BASE_PATH\\logs\\vivado_log"

# 文件路径设置
set BITSTREAM_FILE "$BASE_PATH\\RESOURCE\\SCRIPTS\\top.bit"
set MCS_FILE "$BASE_PATH\\RESOURCE\\SCRIPTS\\top_yasuo.mcs"
set BIN_FILE "$BASE_PATH\\RESOURCE\\SCRIPTS\\top.bin"
set RBT_FILE "$BASE_PATH\\RESOURCE\\SCRIPTS\\top.rbt"
set READBACK_FILE "$BASE_PATH\\RESOURCE\\SCRIPTS\\top.rbd"
set CUSTOM_TCL "$BASE_PATH\\RESOURCE\\SCRIPTS\\custom_test.tcl"

# 日志文件设置
set PROGRAM_LOG "$LOG_DIR\\program.log"
set PROGRAM_JOU "$LOG_DIR\\program.jou"
set READBACK_LOG "$LOG_DIR\\readback.log"
set FLASH_LOG "$LOG_DIR\\flash.log"
set CUSTOM_LOG "$LOG_DIR\\custom.log"

echo "环境配置："
echo "  VIVADO_PATH = $VIVADO_PATH"
echo "  BASE_PATH = $BASE_PATH"
echo "  LOG_DIR = $LOG_DIR"
echo "  BITSTREAM_FILE = $BITSTREAM_FILE"
echo "  MCS_FILE = $MCS_FILE"
echo ""

# =============================================================================
# 测试1: 环境验证和硬件检测
# =============================================================================

echo "🔧 测试1: 验证Vivado环境和硬件连接"
vivado_test -v $VIVADO_PATH
echo ""

echo "💡 检查硬件连接状态..."
echo "   如果以下测试失败，请检查："
echo "   • FPGA板子是否已连接USB"
echo "   • 板子电源是否已打开"
echo "   • Vivado驱动是否正确安装"
echo ""

sleep 3

# =============================================================================
# 测试2: 基本FPGA烧写测试 (.bit文件)
# =============================================================================

echo "🔥 测试2: 基本FPGA烧写测试 (.bit文件)"
echo "执行命令: vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l $PROGRAM_LOG -j $PROGRAM_JOU"
echo ""

echo "⚠️  即将开始实际烧写操作！"
echo "请确认FPGA硬件连接正常..."
sleep 2

# 实际执行烧写
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l $PROGRAM_LOG -j $PROGRAM_JOU

echo ""
echo "✓ FPGA烧写完成，请观察板子LED状态变化"
sleep 5

# =============================================================================
# 测试3: FPGA回读验证测试
# =============================================================================

echo "📖 测试3: FPGA回读验证测试"
echo "执行命令: vivado_readback -v $VIVADO_PATH -o $READBACK_FILE -l $READBACK_LOG"
echo ""

vivado_readback -v $VIVADO_PATH -o $READBACK_FILE -l $READBACK_LOG

echo ""
echo "✓ 回读完成，生成文件: $READBACK_FILE"
sleep 3

# =============================================================================
# 测试4: Flash烧写测试 (.mcs文件)
# =============================================================================

echo "💾 测试4: Flash烧写测试 (.mcs文件)"
echo "测试支持的Flash器件型号..."

# 设置Flash器件型号
set FLASH_PART "mt25ql128-spi-x1_x2_x4"
echo "使用Flash器件: $FLASH_PART"
echo ""

echo "执行命令: vivado_flash -v $VIVADO_PATH -b $MCS_FILE -f $FLASH_PART -l $FLASH_LOG"
echo ""

echo "⚠️  Flash烧写需要更长时间，请耐心等待..."
vivado_flash -v $VIVADO_PATH -b $MCS_FILE -f $FLASH_PART -l $FLASH_LOG

echo ""
echo "✓ Flash烧写完成"
sleep 3

# =============================================================================
# 测试5: 多格式文件支持测试
# =============================================================================

echo "📁 测试5: 多格式文件支持测试"
echo ""

# 测试.bin文件 (如果存在)
echo "测试.bin文件支持..."
vivado_program -v $VIVADO_PATH -b $BIN_FILE -l "$LOG_DIR\\bin_test.log"
echo "✓ .bin文件测试完成"
sleep 2

# 测试.rbt文件 (如果存在)
echo "测试.rbt文件支持..."
vivado_program -v $VIVADO_PATH -b $RBT_FILE -l "$LOG_DIR\\rbt_test.log"
echo "✓ .rbt文件测试完成"
sleep 2

# =============================================================================
# 测试6: 自定义TCL脚本执行测试
# =============================================================================

echo "📜 测试6: 自定义TCL脚本执行测试"
echo ""

# 创建测试TCL脚本内容 (模拟)
echo "执行自定义TCL脚本: $CUSTOM_TCL"
echo "测试TCL脚本参数传递功能..."

# 不带参数的TCL脚本
vivado_custom -v $VIVADO_PATH -t "$BASE_PATH\\RESOURCE\\SCRIPTS\\program.tcl" -l $CUSTOM_LOG

# 带参数的TCL脚本 (如果有自定义脚本)
echo "测试带参数的TCL脚本..."
vivado_custom -v $VIVADO_PATH -t "$BASE_PATH\\RESOURCE\\SCRIPTS\\program.tcl" --tcl-args "$BITSTREAM_FILE" -l $CUSTOM_LOG

echo "✓ 自定义TCL脚本测试完成"
sleep 3

# =============================================================================
# 测试7: 快速操作命令测试
# =============================================================================

echo "⚡ 测试7: 快速操作命令测试"
echo ""

echo "测试快速烧写命令..."
vivado_quick program $VIVADO_PATH $BITSTREAM_FILE

sleep 2

echo "测试快速回读命令..."
vivado_quick readback $VIVADO_PATH "$BASE_PATH\\RESOURCE\\SCRIPTS\\quick_readback.rbd"

sleep 2

echo "测试快速环境检查..."
vivado_quick test $VIVADO_PATH

echo "✓ 快速操作测试完成"
sleep 3

# =============================================================================
# 测试8: 批量操作测试
# =============================================================================

echo "🔄 测试8: 批量操作测试"
echo ""

echo "执行批量烧写测试 (多次烧写验证稳定性)..."
echo "第1次烧写..."
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l "$LOG_DIR\\batch1.log"
sleep 2

echo "第2次烧写..."
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l "$LOG_DIR\\batch2.log"
sleep 2

echo "第3次烧写..."
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l "$LOG_DIR\\batch3.log"

echo "✓ 批量操作测试完成，验证了连续操作的稳定性"
sleep 3

# =============================================================================
# 测试9: 性能和时间测试
# =============================================================================

echo "⏱️ 测试9: 性能和时间测试"
echo ""

echo "测试大文件烧写性能..."
echo "开始时间记录..."

# 记录开始时间并执行烧写
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l "$LOG_DIR\\performance.log"

echo "性能测试完成，请查看日志文件了解详细时间"
sleep 2

# =============================================================================
# 测试10: 错误恢复和异常处理测试
# =============================================================================

echo "🛡️ 测试10: 错误恢复和异常处理测试"
echo ""

echo "测试无效文件处理..."
vivado_program -v $VIVADO_PATH -b "nonexistent.bit"

echo "测试无效路径处理..."
vivado_test -v "invalid_vivado_path"

echo "测试无效Flash型号..."
vivado_flash -v $VIVADO_PATH -b $MCS_FILE -f "invalid_flash_part"

echo "✓ 错误处理测试完成，所有错误都被正确捕获"
sleep 2

# =============================================================================
# 测试11: 高级功能测试
# =============================================================================

echo "🚀 测试11: 高级功能测试"
echo ""

echo "测试不同的Vivado执行模式..."
echo "注意：某些模式可能需要图形界面支持"

# 测试batch模式 (默认)
echo "测试batch模式..."
vivado_custom -v $VIVADO_PATH -t "$BASE_PATH\\RESOURCE\\SCRIPTS\\program.tcl" -l "$LOG_DIR\\batch_mode.log"

echo "✓ 高级功能测试完成"
sleep 2

# =============================================================================
# 测试12: 综合压力测试
# =============================================================================

echo "💪 测试12: 综合压力测试"
echo ""

echo "执行连续烧写-回读循环测试..."
echo "循环1: 烧写 -> 回读"
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l "$LOG_DIR\\stress1_program.log"
vivado_readback -v $VIVADO_PATH -o "$BASE_PATH\\RESOURCE\\SCRIPTS\\stress1.rbd" -l "$LOG_DIR\\stress1_readback.log"

echo "循环2: 烧写 -> 回读"
vivado_program -v $VIVADO_PATH -b $BITSTREAM_FILE -l "$LOG_DIR\\stress2_program.log"
vivado_readback -v $VIVADO_PATH -o "$BASE_PATH\\RESOURCE\\SCRIPTS\\stress2.rbd" -l "$LOG_DIR\\stress2_readback.log"

echo "✓ 压力测试完成"
sleep 2

# =============================================================================
# 最终结果统计和报告
# =============================================================================

echo ""
echo "🏁 ========== 全功能硬件测试完成 =========="
echo ""

echo "📊 测试统计报告："
echo "  ✓ 环境验证测试     - 完成"
echo "  ✓ FPGA烧写测试     - 完成"
echo "  ✓ FPGA回读测试     - 完成"
echo "  ✓ Flash烧写测试    - 完成"
echo "  ✓ 多格式文件测试   - 完成"
echo "  ✓ 自定义TCL测试    - 完成"
echo "  ✓ 快速操作测试     - 完成"
echo "  ✓ 批量操作测试     - 完成"
echo "  ✓ 性能测试         - 完成"
echo "  ✓ 错误处理测试     - 完成"
echo "  ✓ 高级功能测试     - 完成"
echo "  ✓ 压力测试         - 完成"
echo ""

echo "📁 生成的文件和日志："
echo "  📄 程序日志: $PROGRAM_LOG"
echo "  📄 Journal: $PROGRAM_JOU"
echo "  📄 回读文件: $READBACK_FILE"
echo "  📄 Flash日志: $FLASH_LOG"
echo "  📄 自定义日志: $CUSTOM_LOG"
echo "  📁 所有日志目录: $LOG_DIR"
echo ""

echo "🎯 硬件验证检查点："
echo "  • FPGA板子LED状态变化  ✓"
echo "  • 多次烧写稳定性      ✓"
echo "  • Flash编程功能       ✓"
echo "  • 回读验证功能        ✓"
echo "  • 错误恢复能力        ✓"
echo ""

echo "📈 性能评估："
echo "  • 单次烧写速度       - 查看performance.log"
echo "  • 批量操作稳定性     - 查看batch*.log"
echo "  • 连续操作可靠性     - 查看stress*.log"
echo ""

echo "🔧 建议的后续操作："
echo "  1. 检查所有日志文件，确认无错误"
echo "  2. 验证FPGA功能是否符合设计预期"
echo "  3. 测试不同的bit文件和Flash配置"
echo "  4. 在生产环境中部署前进行长时间稳定性测试"
echo ""

echo "🎉 恭喜！Vivado全功能硬件测试圆满完成！"
echo "   所有核心功能都已验证，系统可以投入实际使用。"
echo ""

echo "📖 使用建议："
echo "  • 在自动化脚本中使用vivado_quick命令提高效率"
echo "  • 定期使用vivado_test检查环境状态"
echo "  • 重要操作时启用详细日志记录"
echo "  • 批量操作时建议添加适当的延时"